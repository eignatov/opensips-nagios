#! /bin/bash
#
# Nagios plugin for ASMONIA
# Written by Niels Fallenbeck <niels.fallenbeck@aisec.fraunhofer.de>
# Last Modified: 2013-02-07
#
# Usage: ./asmonia -M <metric> [-w <thres_warning>] [-c <thres_critical>]
#
# Description:
#
# This plugin returns the state of the openSIPS SIP server.
#
# Output:
#
# Depending on the thresholds it will return the appropriate state of the
# server
#
# Notes:
#
# Standard warning threshold is 2
# Standard critical threshold is 5
#
# Examples:
#
# Check for logged in users and return warning state at 10 and critical state
# at 50
#
#   asmonia -M users -w 10 -c 50
#

# opensipsctl binary
OPENSIPSCTL="/usr/local/bin/opensips/sbin/opensipsctl"
#OPENSIPSCTL="./opensipsctl_dummy" # dummy script for testing purposes

# States
STATE_OK=0
STATE_WARNING=1
STATE_CRICITAL=2
STATE_UNKNOWN=3

# Script settings
PROGNAME=`/usr/bin/basename $0`
#PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="0.2"

print_usage() {
    echo "Usage: $PROGNAME -M users [-w 3] [-c 10]"
    echo "Usage: $PROGNAME -M dialogs [-w 3] [-c 10]"
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
}

print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    print_usage
    echo ""
    echo "ASMONIA openSIPS plugin for Nagios"
    echo ""
    support
}

# Define default values
threshold_warning=2
threshold_critical=5
exitstatus=$STATE_UNKNOWN #default

# Make sure the correct number of command line
# arguments have been supplied
if [ $# -lt 1 ]; then
    print_usage
    exit $STATE_UNKNOWN
fi

# Parse command line arguments
while test -n "$1"; do
    case "$1" in
        --help)
            print_help
            exit $STATE_OK
            ;;
        -h)
            print_help
            exit $STATE_OK
            ;;
        --version)
            echo $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        -V)
            echo $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        --metric)
            metric=$2
            shift
            ;;
        -M)
            metric=$2
            shift
            ;;
        -x)
            exitstatus=$2
            shift
            ;;
        --exitstatus)
            exitstatus=$2
            shift
            ;;
        -w)
            threshold_warning=$2
            shift
            ;;
        -c)
            threshold_critical=$2
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

# If openSIPS ctrl binary does not exist, exit
if [ -z $OPENSIPSCTL ]; then
    echo "Path to opensipsctl not specified!"
    exit $STATE_UNKNOWN
elif [ ! -e $OPENSIPSCTL ]; then
    echo "Could not find opensipsctl!"
    exit $STATE_UNKNOWN
elif [ ! -x $OPENSIPSCTL ]; then
    echo "Could not execute opensipsctl!"
    exit $STATE_UNKNOWN
fi

# Define variables used for output and opensipsctl execution
tnum=-1;
tdesc="";
xbase="$OPENSIPSCTL fifo get_statistics"

# Analyze
# This part of the script can be easily extended if new opensips metrics need
# to be analyzed.
if [ $metric = "users" ]; then
    tnum=`$xbase usrloc: | grep "location-users" | awk '{ print $3 }'`
    tdesc="active users"
elif [ $metric = "dialogs" ]; then
    tnum=`$xbase dialog: | grep "active_dialogs" | awk '{ print $3 }'`
    tdesc="active dialogs"
else
    echo "Metric $metric unknown!"
    exit $STATE_UNKNOWN
fi

# Print result
if [ $tnum -lt 0 ]; then
    echo "ASMONIA UNKNOWN - Could not determine $tdesc"
    exitstatus=$STATE_UNKNOWN
elif [ $tnum -ge $threshold_critical ]; then
    echo "ASMONIA CRITICAL - $tnum $tdesc"
    exitstatus=$STATE_CRICITAL
elif [ $tnum -ge $threshold_warning ]; then
    echo "ASMONIA WARNING - $tnum $tdesc"
    exitstatus=$STATE_WARNING
else
    echo "ASMONIA OK - $tnum $tdesc"
    exitstatus=$STATE_OK
fi

# Exit script
exit $exitstatus
